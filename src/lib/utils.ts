"use client";

import crypto from 'crypto';

/**
 * L·∫•y secret key t·ª´ bi·∫øn m√¥i tr∆∞·ªùng
 * - ∆Øu ti√™n APP_SECRET_KEY, sau ƒë√≥ SECRET_KEY, cu·ªëi c√πng l√† fallback m·∫∑c ƒë·ªãnh
 * @returns string - secret key
 */
const getSecretKey = (): string => {
  return process.env.APP_SECRET_KEY || process.env.SECRET_KEY || '793ddabd7c83070cd1ac72877edd9d29';
};

/**
 * T·∫°o checksum SHA256 v·ªõi secret key (d√πng cho x√°c th·ª±c)
 * @param providerUserId - t√™n ƒëƒÉng nh·∫≠p (email/s·ªë ƒëi·ªán tho·∫°i)
 * @param password - m·∫≠t kh·∫©u
 * @returns Chu·ªói hash SHA256
 */
export const generateChecksum = (providerUserId: string, password: string): string => {
  const secretKey = getSecretKey();
  const data = `${providerUserId}${password}${secretKey}`;
  // console.log('üîç [SECRET KEY] Secret Key:', secretKey);
  // console.log('üîç [CHECKSUM] Data:', data);
  return crypto.createHash('sha256').update(data).digest('hex');
};

/**
 * T·∫°o checksum ƒë∆°n gi·∫£n (kh√¥ng c√≥ secret key, d√πng cho test)
 * @param providerUserId - t√™n ƒëƒÉng nh·∫≠p
 * @param password - m·∫≠t kh·∫©u
 * @returns Chu·ªói hash SHA256
 */
export const generateSimpleChecksum = (providerUserId: string, password: string): string => {
  const data = `${providerUserId}${password}`;
  return crypto.createHash('sha256').update(data).digest('hex');
};

/**
 * Ki·ªÉm tra ƒë·ªãnh d·∫°ng email h·ª£p l·ªá
 * @param email - email c·∫ßn ki·ªÉm tra
 * @returns true n·∫øu h·ª£p l·ªá, false n·∫øu sai ƒë·ªãnh d·∫°ng
 */
export const validateEmail = (email: string): boolean => {
  const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
  return emailRegex.test(email);
};

/**
 * Ki·ªÉm tra ƒë·ªãnh d·∫°ng s·ªë ƒëi·ªán tho·∫°i Vi·ªát Nam h·ª£p l·ªá
 * @param phone - s·ªë ƒëi·ªán tho·∫°i c·∫ßn ki·ªÉm tra
 * @returns true n·∫øu h·ª£p l·ªá, false n·∫øu sai ƒë·ªãnh d·∫°ng
 */
export const validatePhone = (phone: string): boolean => {
  const phoneRegex = /^(0|\+84)(3[2-9]|5[689]|7[06-9]|8[1-689]|9[0-46-9])[0-9]{7}$/;
  return phoneRegex.test(phone);
};

/**
 * Ki·ªÉm tra m·∫≠t kh·∫©u ƒë·ªß m·∫°nh (>= 6 k√Ω t·ª±)
 * @param password - m·∫≠t kh·∫©u
 * @returns true n·∫øu h·ª£p l·ªá, false n·∫øu y·∫øu
 */
export const validatePassword = (password: string): boolean => {
  return password.length >= 6;
};

/**
 * Chu·∫©n h√≥a s·ªë ƒëi·ªán tho·∫°i v·ªÅ d·∫°ng 0xxxxxxxxx
 * @param phone - s·ªë ƒëi·ªán tho·∫°i
 * @returns s·ªë ƒëi·ªán tho·∫°i chu·∫©n h√≥a
 */
export const formatPhoneNumber = (phone: string): string => {
  // Lo·∫°i b·ªè k√Ω t·ª± kh√¥ng ph·∫£i s·ªë
  const cleaned = phone.replace(/\D/g, '');
  // N·∫øu b·∫Øt ƒë·∫ßu b·∫±ng 84, chuy·ªÉn th√†nh 0
  if (cleaned.startsWith('84')) {
    return '0' + cleaned.substring(2);
  }
  return cleaned;
};

/**
 * L∆∞u accessToken v√† refreshToken v√†o localStorage
 * @param accessToken
 * @param refreshToken
 */
export const saveTokens = (accessToken: string, refreshToken: string): void => {
  localStorage.setItem('accessToken', accessToken);
  localStorage.setItem('refreshToken', refreshToken);
};

/**
 * X√≥a accessToken v√† refreshToken kh·ªèi localStorage
 */
export const clearTokens = (): void => {
  localStorage.removeItem('accessToken');
  localStorage.removeItem('refreshToken');
};

/**
 * Ki·ªÉm tra user ƒë√£ ƒëƒÉng nh·∫≠p ch∆∞a (c√≥ accessToken)
 * @returns true n·∫øu ƒë√£ ƒëƒÉng nh·∫≠p, false n·∫øu ch∆∞a
 */
export const isAuthenticated = (): boolean => {
  return !!localStorage.getItem('accessToken');
};

/**
 * L·∫•y th√¥ng tin user t·ª´ accessToken (gi·∫£i m√£ payload JWT)
 * @returns object payload ho·∫∑c null n·∫øu l·ªói
 */
export const getUserInfo = () => {
  const token = localStorage.getItem('accessToken');
  if (!token) return null;
  try {
    const payload = JSON.parse(atob(token.split('.')[1]));
    return payload;
  } catch (error) {
    return null;
  }
};

/**
 * Ki·ªÉm tra token c√≥ s·∫Øp h·∫øt h·∫°n kh√¥ng
 * @returns true n·∫øu token c√≤n h·ª£p l·ªá, false n·∫øu s·∫Øp h·∫øt h·∫°n ho·∫∑c ƒë√£ h·∫øt h·∫°n
 */
export const isTokenExpiringSoon = (): boolean => {
  const token = localStorage.getItem('accessToken');
  if (!token) return false;
  
  try {
    const payload = JSON.parse(atob(token.split('.')[1]));
    const expiryTime = payload.exp * 1000; // ms
    const currentTime = Date.now();
    const timeUntilExpiry = expiryTime - currentTime;
    
    // Tr·∫£ v·ªÅ true n·∫øu c√≤n √≠t h∆°n 5 ph√∫t
    return timeUntilExpiry < 5 * 60 * 1000;
  } catch (error) {
    return false;
  }
};

/**
 * Ki·ªÉm tra token ƒë√£ h·∫øt h·∫°n ch∆∞a
 * @returns true n·∫øu token ƒë√£ h·∫øt h·∫°n, false n·∫øu c√≤n h·ª£p l·ªá
 */
export const isTokenExpired = (): boolean => {
  const token = localStorage.getItem('accessToken');
  if (!token) return true;
  
  try {
    const payload = JSON.parse(atob(token.split('.')[1]));
    const expiryTime = payload.exp * 1000; // ms
    const currentTime = Date.now();
    
    return currentTime >= expiryTime;
  } catch (error) {
    return true;
  }
};

/**
 * L·∫•y th·ªùi gian c√≤n l·∫°i c·ªßa token (t√≠nh b·∫±ng gi√¢y)
 * @returns s·ªë gi√¢y c√≤n l·∫°i, -1 n·∫øu token kh√¥ng h·ª£p l·ªá
 */
export const getTokenTimeRemaining = (): number => {
  const token = localStorage.getItem('accessToken');
  if (!token) return -1;
  
  try {
    const payload = JSON.parse(atob(token.split('.')[1]));
    const expiryTime = payload.exp * 1000; // ms
    const currentTime = Date.now();
    const timeRemaining = Math.floor((expiryTime - currentTime) / 1000);
    
    return Math.max(0, timeRemaining);
  } catch (error) {
    return -1;
  }
};

/**
 * T·ª± ƒë·ªông nh·∫≠n di·ªán lo·∫°i t√†i kho·∫£n (email/phone)
 * @param input - chu·ªói nh·∫≠p v√†o
 * @returns 'EMAIL' | 'PHONE'
 */
export const detectProvider = (input: string): 'EMAIL' | 'PHONE' => {
  if (validateEmail(input)) return 'EMAIL';
  if (validatePhone(input)) return 'PHONE';
  return 'PHONE'; // M·∫∑c ƒë·ªãnh l√† phone
}; 